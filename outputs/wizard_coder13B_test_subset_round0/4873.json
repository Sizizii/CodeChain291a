{"prompt": "Below is a competitive programming question. Read the question carefully.\n\n*Instruction*\nDevelop a well-structured Python solution for the provided problem that obeys the constraints and passes the example test cases. Ensure modularity and considering potential edge cases and failures. Start by outlining the required code modules, including function headers and signatures. Subsequently, proceed to implement each module to create the final code.\n\nIn simpler terms, create a clean and organized Python solution for the given problem. Break it down into smaller parts (modules) with clear function names and input/output specifications. Once the structure is ready, write the actual code for each module to complete the solution.\n\nThe output code needs to read from and write to standard IO. Please wrap your code answer using ```.\n\n### Example 1\n### TASK:\nPolycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of $n$ binary words to play a game \"words\". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\nWord reversal is the operation of reversing the order of the characters. For example, the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules. \n\nPolycarp wants to reverse minimal number of words. Please, help him.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of words in the Polycarp's set. Next $n$ lines contain these words. All of $n$ words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\nGuaranteed, that the sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed $4\\cdot10^6$.\n\n\n-----Output-----\n\nPrint answer for all of $t$ test cases in the order they appear.\n\nIf there is no answer for the test case, print -1. Otherwise, the first line of the output should contain $k$ ($0 \\le k \\le n$) \u2014 the minimal number of words in the set which should be reversed. The second line of the output should contain $k$ distinct integers \u2014 the indexes of the words in the set which should be reversed. Words are numerated from $1$ to $n$ in the order they appear. If $k=0$ you can skip this line (or you can print an empty line). If there are many answers you can print any of them.\n\n\n-----Example-----\nInput\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2\n\n### RESPONSE:\n\nSTEP 1: GENERATE SUB-MODULES:\n```module \ndef count_start_end_chars(words):\n    \"\"\"\n    Description: This function counts the number of words that start and end with each character.\n    Input:\n    words (list): A list of binary words.\n    Output:\n    start_count (defaultdict): A dictionary containing the count of words that start with each character.\n    end_count (defaultdict): A dictionary containing the count of words that end with each character.\n    \"\"\"\n```\n\n```module\ndef reverse_words(words, reversed_indices):\n    \"\"\"\n    Description: This function reverses the specified words in the given list.\n    Input:\n    words (list): A list of binary words.\n    reversed_indices (list): A list of indices indicating the words to be reversed.\n    Output:\n    reversed_words (list): A new list of words with the specified words reversed.\n    \"\"\"\n```\n\nSTEP 2: GENERATE PYTHON CODE\n```python \nimport collections\nfrom utils import *\n\ndef count_start_end_chars(words):\n    start_count = collections.defaultdict(int)\n        end_count = collections.defaultdict(int)\n        for word in words:\n            start_count[word[0]] += 1\n            end_count[word[-1]] += 1\n        return start_count, end_count\n\ndef reverse_words(words, reversed_indices):\n    reversed_words = []\n    for i, word in enumerate(words):\n        if i in reversed_indices:\n            reversed_words.append(word[::-1])\n        else:\n            reversed_words.append(word)\n    return reversed_words\n\ndef solve_task(words):\n    start_count, end_count = count_start_end_chars(words)\n\n    characters_with_difference = []\n    for char in start_count:\n        if abs(start_count[char] - end_count[char]) > 1:\n            characters_with_difference.append(char)\n\n    reversed_indices = []\n    for char in characters_with_difference:\n        difference = abs(start_count[char] - end_count[char])\n        reverse_count = difference // 2\n        if start_count[char] < end_count[char]:\n            indices = [i for i, word in enumerate(words) if word.startswith(char)]\n            reversed_indices.extend(indices[:reverse_count])\n        else:\n            indices = [i for i, word in enumerate(words) if word.endswith(char)]\n            reversed_indices.extend(indices[:reverse_count])\n\n    reversed_words = reverse_words(words, reversed_indices)\n\n    total_reversed = len(reversed_indices)\n    return total_reversed, reversed_words\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(input())\n    total_reversed, reversed_words = solve_task(words)\n    print(total_reversed)\n    if total_reversed != 0:\n        print(*reversed_words)\n```\n\n-----------------\n\n### Example 2\n### TASK:\nWe\u2019re building an old-school back-to-basics computer game. It\u2019s a very simple text based adventure game where you walk around and try to find treasure, avoiding falling into traps. The game is played on a rectangular grid and the player gets very limited information about her surroundings.\n\nThe game will consist of the player moving around on the grid for as long as she likes (or until she falls into a trap). The player can move up, down, left and right (but not diagonally). She will pick up gold if she walks into the same square as the gold is. If the player stands next to (i.e., immediately up, down, left, or right of) one or more traps, she will \u201csense a draft\u201d but will not know from what direction the draft comes, or how many traps she\u2019s near. If she tries to walk into a square containing a wall, she will notice that there is a wall in that direction and remain in the position where she was.\n\nFor scoring purposes, we want to show the player how much gold she could have gotten safely. That is, how much gold can a player get playing with an optimal strategy and always being sure that the square she walked into was safe. The player does not have access to the map and the maps are randomly generated for each game so she has no previous knowledge of the game.\n\n-----Input-----\nThe first line of input contains two positive integers $W$ and $H$, neither of them smaller than $3$ or larger than $50$, giving the width and the height of the map, respectively. The next $H$ lines contain $W$ characters each, giving the map. The symbols that may occur in a map are as follows:\n\nP\n\nthe player\u2019s starting position\n\nG\n\na piece of gold\n\nT\n\na trap\n\n#\n\na wall\n\n.\n\nnormal floor\n\nThere will be exactly one \u2019P\u2019 in the map, and the border of the map will always contain walls.\n\n-----Output-----\nOutput the number of pieces of gold the player can get without risking falling into a trap.\n\n-----Examples-----\nSample Input:\n7 4\n#######\n#P.GTG#\n#..TGG#\n#######\nSample Output:\n1\n\n\n\n### RESPONSE:\n", "output": ["```python\ndef find_gold(map):\n    \"\"\"\n    Description: This function finds the number of pieces of gold the player can get without falling into a trap.\n    Input:\n    map (list): A list of strings representing the map.\n    Output:\n    gold_count (int): The number of pieces of gold the player can get without falling into a trap.\n    \"\"\"\n    W, H = map[0], len(map)\n    grid = [list(row) for row in map[1:]]\n    player_position = None\n    gold_count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == \"P\":\n                player_position = (i, j)\n            elif grid[i][j] == \"G\":\n                gold_count += 1\n    return gold_count\n\nt = int(input())\nfor _ in range(t):\n    W, H = map(int, input().split())\n    map = [input() for _ in range(H)]\n    gold_count = find_gold(map)\n    print(gold_count)\n``` ", "\nThe task is to find the maximum number of gold pieces the player can collect without falling into a trap. The player can move up, down, left, or right, but not diagonally. The map is represented as a matrix of characters where '#' represents a wall, 'P' represents the player's starting position, and 'G' represents gold. The player can sense a draft if there is at least one trap in a neighbouring square, but she doesn't know which direction the draft comes from.\n\nSTEP 1: GENERATE SUB-MODULES\n```module \ndef create_matrix(w, h):\n    \"\"\"\n    Description: This function creates a matrix of size (w, h) filled with '#'\n    Input:\n    w (int): width of the matrix\n    h (int): height of the matrix\n    Output:\n    matrix (list): A matrix filled with '#'\n    \"\"\"\n```\n\n```module\ndef print_matrix(matrix):\n    \"\"\"\n    Description: This function prints the matrix in a nice format\n    Input:\n    matrix (list): A matrix\n    \"\"\"\n```\n\n```module\ndef find_start_position(matrix):\n    \"\"\"\n    Description: This function finds the starting position (row, col) of the player in the matrix\n    Input:\n    matrix (list): A matrix\n    Output:\n    (row, col) (tuple): The starting position of the player\n    \"\"\"\n```\n\n```module\ndef find_gold(matrix):\n    \"\"\"\n    Description: This function finds all the gold positions (row, col) in the matrix\n    Input:\n    matrix (list): A matrix\n    Output:\n    gold_positions (list): A list of tuples (row, col) of gold positions\n    \"\"\"\n```\n\n```module\ndef find_traps(matrix):\n    \"\"\"\n    Description: This function finds all the trap positions (row, col) in the matrix\n    Input:\n    matrix (list): A matrix\n    Output:\n    trap_positions (list): A list of tuples (row, col) of trap positions\n    \"\"\"\n```\n\n```module\ndef safe_gold(matrix, player_position, gold_positions, traps):\n    \"\"\"\n    Description: This function finds the number of safe gold pieces the player can collect\n    Input:\n    matrix (list): A matrix\n    player_position (tuple): The starting position of the player (row, col)\n    gold_positions (list): A list of tuples (row, col) of gold positions\n    traps (list): A list of tuples (row, col) of trap positions\n    Output:\n    safe_gold (int): The number of safe gold pieces the player can collect\n    \"\"\"\n```\n\n```module\ndef safe_moves(matrix, player_position, traps):\n    \"\"\"\n    Description: This function finds the number of safe moves the player can make\n    Input:\n    matrix (list): A matrix\n    player_position (tuple): The starting position of the player (row, col)\n    traps (list): A list of tuples (row, col) of trap positions\n    Output:\n    safe_moves (int): The number of safe moves the player can make\n    \"\"\"\n```\n\nSTEP 2: GENERATE PYTHON CODE\n```python\nimport collections\nfrom utils import *\n\ndef create_matrix(w, h):\n    matrix = []\n    for _ in range(h):\n        row = input()\n        matrix.append(list(row) + ['#'] * (w - len(row)) if len(row) < w else list(row[:w]) + ['#'])\n    return matrix\n\ndef print_matrix(matrix):\n    for row in matrix:\n        print(''.join(row))\n\ndef find_start_position(matrix):\n    for i, row in enumerate(matrix):\n        for j, char in enumerate(row):\n            if char == 'P':\n                return i, j\n\ndef find_gold(matrix):\n    gold_positions = []\n    for i, row in enumerate(matrix):\n        for j, char in enumerate(row):\n            if char == 'G':\n                gold_positions.append((i, j))\n    return gold_positions\n\ndef find_traps(matrix):\n    traps = []\n    for i, row in enumerate(matrix):\n        for j, char in enumerate(row):\n            if char == 'T':\n                traps.append((i, j))\n    return traps\n\ndef safe_gold(matrix, player_position, gold_positions, traps):\n    safe_gold = 0\n    for gold_position in gold_positions:\n        if gold_position in safe_moves(matrix, player_position, traps):\n            safe_gold += 1\n    return safe_gold\n\ndef safe_moves(matrix, player_position, traps):\n    safe_moves = []\n    for move in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        row, col = player_position[0] + move[0], player_position[1] + move[1]\n        if 0 <= row < len(matrix) and 0 <= col < len(matrix[0]) and matrix[row][col] != '#':\n            if (row, col) not in traps:\n                safe_moves.append((row, col))\n    return safe_moves\n\n\nw, h = map(int, input().split())\nmatrix = create_matrix(w, h)\nplayer_position = find_start_position(matrix)\ngold_positions = find_gold(matrix)\ntraps = find_traps(matrix)\nprint(safe_gold(matrix, player_position, gold_positions, traps))\n``` ", "\nFor this problem, we can start by creating a simple grid representation for the game. We can use a 2D list to represent the game map. Each cell in the list can have a value of either a character (P, T, G, or #) or None.\n\nNext, we'll create a function to calculate the number of pieces of gold that the player can get without falling into a trap. We'll use Dijkstra's algorithm to find the shortest path from the player's starting position to each piece of gold. We'll create a function to find the shortest path from the player's position to each gold, and then we'll calculate the total number of gold pieces that can be collected. If we encounter a trap, we'll terminate the path and return infinity.\n\nFinally, we'll create a function to check if the player can safely collect all the gold without falling into a trap. We'll iterate over the grid and try to find the shortest path to each gold piece. If we find a trap along the way, we'll return False. If we reach the end without encountering a trap, we'll return True.\n\nSTEP 1: GENERATE SUB-MODULES:\n```module \ndef read_map(W, H):\n    \"\"\"\n    Description: This function reads the map input and creates a 2D list representation of the game grid.\n    Input:\n    W (int): The width of the grid.\n    H (int): The height of the grid.\n    Output:\n    grid (list): A 2D list representation of the game grid.\n    \"\"\"\n```\n\n```module\ndef find_player_position(grid):\n    \"\"\"\n    Description: This function finds the player's position in the grid.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    Output:\n    player_position (tuple): A tuple containing the row and column indices of the player's position.\n    \"\"\"\n```\n\n```module\ndef find_gold_positions(grid):\n    \"\"\"\n    Description: This function finds the positions of the gold pieces in the grid.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    Output:\n    gold_positions (list): A list of tuples containing the row and column indices of the gold pieces.\n    \"\"\"\n```\n\n```module\ndef find_trap_positions(grid):\n    \"\"\"\n    Description: This function finds the positions of the traps in the grid.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    Output:\n    trap_positions (list): A list of tuples containing the row and column indices of the traps.\n    \"\"\"\n```\n\n```module\ndef create_adjacency_list(grid):\n    \"\"\"\n    Description: This function creates an adjacency list for the graph representation of the grid.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    Output:\n    adjacency_list (list): A list of lists containing the adjacent cells for each cell in the grid.\n    \"\"\"\n```\n\n```module\ndef dijkstra_shortest_path(grid, adjacency_list, start, end):\n    \"\"\"\n    Description: This function finds the shortest path from the start to the end using Dijkstra's algorithm.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    adjacency_list (list): A list of lists containing the adjacent cells for each cell in the grid.\n    start (tuple): A tuple containing the row and column indices of the starting position.\n    end (tuple): A tuple containing the row and column indices of the ending position.\n    Output:\n    shortest_path (list): A list of tuples containing the shortest path from the start to the end.\n    \"\"\"\n```\n\n```module\ndef can_collect_all_gold(grid):\n    \"\"\"\n    Description: This function checks if the player can safely collect all the gold without falling into a trap.\n    Input:\n    grid (list): A 2D list representation of the game grid.\n    Output:\n    safe (bool): A boolean value indicating if the player can safely collect all the gold.\n    \"\"\"\n```\n\nSTEP 2: GENERATE PYTHON CODE\n```python \nimport collections\nfrom utils import *\n\ndef read_map(W, H):\n    grid = []\n    for _ in range(H):\n        row = list(input())\n        grid.append(row)\n    return grid\n\ndef find_player_position(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'P':\n                return i, j\n\ndef find_gold_positions(grid):\n    gold_positions = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0]):\n            if grid[i][j] == 'G':\n                gold_positions.append((i, j))\n    return gold_positions\n\ndef find_trap_positions(grid):\n    trap_positions = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0]):\n            if grid[i][j] == 'T':\n                trap_positions.append((i, j))\n    return trap_positions\n\ndef create_adjacency_list(grid):\n    adjacency_list = collections.defaultdict(list)\n    for i in range(len(grid)):\n        for j in range(len(grid[0]):\n            if grid[i][j] != '#':\n                if i - 1 >= 0 and grid[i-1][j] != '#':\n                    adjacency_list[(i, j)].append((i-1, j))\n                if i + 1 < len(grid) and grid[i+1][j] != '#':\n                    adjacency_list[(i, j)].append((i+1, j))\n                if j - 1 >= 0 and grid[i][j-1] != '#':\n                    adjacency_list[(i, j)].append((i, j-1))\n                if j + 1 < len(grid[0]) and grid[i][j+1] != '#':\n                    adjacency_list[(i, j)].append((i, j+1))\n    return adjacency_list\n\ndef dijkstra_shortest_path(grid, adjacency_list, start, end):\n    visited = set()\n    dist = collections.defaultdict(lambda: float('inf'))\n    dist[start] = 0\n    queue = [(0, start)]\n    while queue:\n        d, cell = heapq.heappop(queue)\n        if cell in visited:\n            continue\n        visited.add(cell)\n        if cell == end:\n            return dist[cell]\n        for neighbor in adjacency_list[cell]:\n            if neighbor not in visited:\n                new_dist = d + 1\n                if new_dist < dist[neighbor]:\n                    dist[neighbor] = new_dist\n                    heapq.heappush", "\nTo solve this problem, we can use a breadth-first search algorithm to find the maximum number of gold pieces the player can collect without falling into a trap. We'll start at the player's position and explore the map by moving up, down, left, or right one step at a time. We'll keep track of the number of gold pieces collected so far and the number of steps taken to get there. If we encounter a wall, we'll stop the search in that direction. If we encounter a trap, we'll stop the search in that direction, but we'll continue exploring in the other directions. If we reach a new position that we haven't explored before, we'll add it to a queue and continue the search.\n\nSTEP 1: GENERATE SUB-MODULES:\n```module \ndef bfs(grid, start):\n    \"\"\"\n    Description: This function performs a breadth-first search from the given start position in the grid.\n    Input:\n    grid (list): A 2D grid representing the map.\n    start (tuple): The starting position (row, column) in the grid.\n    Output:\n    visited (set): A set of visited positions.\n    gold_count (int): The maximum number of gold pieces that can be collected without falling into a trap.\n    \"\"\"\n```\n\nSTEP 2: GENERATE PYTHON CODE\n```python\nimport collections\n\ndef bfs(grid, start):\n    queue = collections.deque([(start, 0)])\n    visited = set([start])\n    gold_count = 0\n\n    while queue:\n        position, steps = queue.popleft()\n        row, col = position\n\n        if grid[row][col] == 'G':\n            gold_count += 1\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in visited:\n                if grid[new_row][new_col] == 'G':\n                    gold_count += 1\n                elif grid[new_row][new_col] == 'T':\n                    continue\n                elif grid[new_row][new_col] == '#':\n                    return visited, gold_count\n                else:\n                    queue.append(((new_row, new_col), steps + 1))\n                    visited.add((new_row, new_col))\n\n    return visited, gold_count\n\n\ndef main():\n    W, H = map(int, input().split())\n    grid = []\n    for i in range(H):\n        grid.append(input())\n\n    for i, row in enumerate(grid):\n        for j, col in enumerate(row):\n            if col == 'P':\n                start = (i, j)\n\n    visited, gold_count = bfs(grid, start)\n    print(gold_count)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIn this example, we have two modules: `bfs` and `main`. The `bfs` module performs a breadth-first search and the `main` function reads the input and calls `bfs` to find the maximum number of gold pieces the player can collect without falling into a trap. "]}